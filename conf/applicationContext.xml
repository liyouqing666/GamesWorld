<?xml version="1.0" encoding="UTF-8"?>

		
<beans xmlns="http://www.springframework.org/schema/beans"
 	   xmlns:p="http://www.springframework.org/schema/p"
 	   xmlns:context="http://www.springframework.org/schema/context"
 	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
			">
		
	<!-- 去加载资源配置文件的内容 -->
	    <!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	        <property name="location" value=""/>
	    </bean> -->
	<!-- 将多个配置文件读取到容器中，交给Spring管理 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- 这里支持多种寻址方式：classpath和file -->
				<value>classpath:log4j.properties</value>
				<value>classpath:jdbc.properties</value>
				<!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->
	            <!-- <value>file:/opt/demo/config/demo-remote.properties</value>-->
			</list>
		</property>
	</bean>
<!-- 加载db.properties文件中的内容，log4j.properties文件中key命名要有一定的特殊规则 -->
	<!--<context:property-placeholder location="classpath:log4j.properties" />	-->
    <!-- value="${log4j.rootLogger}" -->
			
	<!-- 
		bean的作用域通过scope来配置	
		通过destroy-method方法销毁 
	-->	
			
	<!-- dbcp数据源配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driverClassName}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
	</bean>	
		
	<!-- 事务管理器 -->	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>	
		
	<!-- 配置SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:com/jbit/games/mapper/*.xml"></property>
	</bean>
	
	<!-- 配置SqlSessionTemplate 现在不需要这个sqlsessiontemplate -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<!-- 上传文件支持 --> 
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- <property name="maxUploadSize"><value>100000</value></property> 
        <property name="defaultEncoding"><value>UTF-8</value></property>  -->
	</bean>
	 
	<!-- 加载事务管理注解驱动 -->
	<tx:annotation-driven transaction-manager="transactionManager" ></tx:annotation-driven>
	
	<!-- 扫描注解  -->
	<context:component-scan base-package="com.jbit.games">
		<context:exclude-filter type="annotation" 
			expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 让我的实现了applicationaware的类生效
	-->
	<bean id="springApplicationContextUtils" class="com.jbit.games.web.servlet.SpringApplicationContextUtils"/>

	<!-- 根据映射文件生成dao的实现类  为了让PropertyPlaceholderConfigurer和这个不冲突
		可以用<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property> -->
		<property name="basePackage" value="com.jbit.games.dao"></property>
	</bean>

	<!-- <aop:config>
		          如果有多个包就这样搞
			<aop:pointcut id="pc" expression="execution(* com.app.service.*.*(..) or com.app.service.*.*(..))" />
			把事务控制在Service层
			<aop:advisor pointcut-ref="pc" advice-ref="tx" />
	   </aop:config> -->
	   <!-- aop的注解 -->
	   <!--  <aop:aspectj-autoproxy></aop:aspectj-autoproxy>  -->	   
</beans>

